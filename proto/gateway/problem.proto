syntax = "proto3";

package problem.v1;

import "google/protobuf/empty.proto";


enum Language {
  LANGUAGE_UNSPECIFIED = 0;
  JAVASCRIPT = 1;
  PYTHON = 2;
}

enum Difficulty {
  DIFFICULTY_UNSPECIFIED = 0;
  EASY = 1;
  MEDIUM = 2;
  HARD = 3;
}

enum TestCaseCollectionType {
  TYPE_UNSPECIFIED = 0;
  RUN = 1;
  SUBMIT = 2;
}

// Sub messages for the problem message

message TestCase {
    string _id = 1;
    string input = 2;
    string output = 3;
}

message TestCaseCollection {
    repeated TestCase run = 1;
    repeated TestCase submit = 2;
}

message Example {
    string _id = 1;
    string input = 2;
    string output = 3;
    string explanation = 4;
}

message StarterCode {
  string _id = 1;        
  Language language = 2;
  string code = 3;
}

message SolutionCode {
    string _id = 1;
    Language language = 2;
    string code = 3;
    int32 executionTime = 4;
    int32 memoryTaken = 5;
}

message UpdateSolutionCode {
    optional Language language = 2;
    optional string code = 3;
    optional int32 executionTime = 4;
    optional int32 memoryTaken = 5;
}

// main problem message for admin.

message Problem {
    string _id = 1;
    string questionId = 2;
    string title = 3;
    string description = 4;
    Difficulty difficulty = 5;
    repeated string tags = 6;
    repeated string constraints = 7;
    repeated StarterCode starterCodes = 8;
    TestCaseCollection testcaseCollection = 9;
    repeated Example examples = 10;
    bool active = 11;
    repeated SolutionCode solutionCodes = 12;
    string createdAt = 13;
    string updatedAt = 14;
}

message ListProblemDetails {
    string _id = 1;
    string title = 2;
    string questionId = 3;
    Difficulty difficulty = 4;
    repeated string tags = 6;
    bool active = 11;
    string createdAt = 13;
    string updatedAt = 14;
}


// --- Service Definition --- 

service ProblemService {
    rpc CreateProblem(CreateProblemRequest) returns (Problem);
    rpc GetProblem(GetProblemRequest) returns (Problem);
    rpc GetProblemForPublic(GetProblemRequest) returns (GetProblemPublicResponse);
    rpc UpdateBasicProblemDetails(UpdateBasicProblemDetailsRequest) returns (google.protobuf.Empty);
    rpc ListProblems(ListProblemRequest) returns (ListProblemResponse);
    rpc AddTestCase(AddTestCaseRequest) returns (google.protobuf.Empty);
    rpc BulkUploadTestCases(BulkUploadTestCasesRequest) returns (google.protobuf.Empty);
    rpc RemoveTestCase(RemoveTestCaseRequest) returns (google.protobuf.Empty);
    rpc AddSolutionCode(AddSolutionCodeRequest) returns (google.protobuf.Empty);
    rpc UpdateSolutionCode(UpdateSolutionCodeRequest) returns (google.protobuf.Empty);
    rpc RemoveSolutionCode(RemoveSolutionCodeRequest) returns (google.protobuf.Empty);
    rpc CheckQuestionIdAvailability(CheckQuestionIdRequest) returns (google.protobuf.Empty);
    rpc CheckProblemTitle(CheckProblemTitleRequest) returns (google.protobuf.Empty);
}

message CreateProblemRequest {
    string questionId = 1;
    string title = 2;
    string description = 3;
    Difficulty difficulty = 4;
    repeated string tags = 5;
}

message GetProblemRequest {
    string _id = 1;
    optional string title = 2;
    optional string questionId = 3;
}

message GetProblemPublicResponse {
    string _id = 1;
    string questionId = 2;
    string title = 3;
    string description = 4;
    Difficulty difficulty = 5;
    repeated string tags = 6;
    repeated string constraints = 7;
    repeated StarterCode starterCodes = 8;
    repeated TestCase run = 9;
    repeated Example examples = 10;
    string createdAt = 13;
    string updatedAt = 14;
}

message ListProblemRequest {
    int32 page = 1;
    int32 limit = 2;

    // optional filters
    optional Difficulty difficulty = 3;
    repeated string tags = 4;
    optional bool active = 5;
    optional string search = 6;
    optional string questionId = 7;
    optional string sort = 8;
}

message ListProblemResponse {
    repeated ListProblemDetails problems = 1;
    int32 totalPage = 2;
    int32 currentPage = 3;
    int32 totalItems = 4;
}

message UpdateBasicProblemDetailsRequest {
    string _id = 1;
    optional string questionId = 2;
    optional string title = 3;
    optional string description = 4;
    optional Difficulty difficulty = 5;
    optional bool active = 6;
    repeated string tags = 7;
    repeated string constraints = 8;
    repeated Example examples = 9;
    repeated StarterCode starterCodes = 10;
}

message AddTestCaseRequest {
    string _id = 1;
    TestCaseCollectionType testCaseCollectionType = 2;
    TestCase testCase = 3;
}

message BulkUploadTestCasesRequest {
    string _id = 1;
    TestCaseCollectionType testCaseCollectionType = 2;
    repeated TestCase testCase = 3;
}


message RemoveTestCaseRequest {
    string _id = 1;
    string testCaseId = 2;
    TestCaseCollectionType testCaseCollectionType = 3;
}

message AddSolutionCodeRequest {
    string _id = 1;
    SolutionCode solutionCode = 2;
}

message UpdateSolutionCodeRequest {
    string _id = 1;
    string solutionCodeId = 2;
    UpdateSolutionCode solutionCode = 3;
}

message RemoveSolutionCodeRequest {
    string _id = 1;
    string solutionCodeId = 2;
}

message CheckQuestionIdRequest {
    string questionId = 1;
}

message CheckProblemTitleRequest {
    string title = 2;
}

// === Submissions ==== 

message Stats {
    int32 totalTestCase = 1;
    int32 passedTestCase = 2;
    int32 failedTestCase = 3;
}

message FailedTestCase {
    int32 index = 1;
    string input = 2;
    string output = 3;
    string expectedOutput = 4;
}

message ExecutionResult {
    Stats stats = 1;
    optional FailedTestCase failedTestCase = 2;
}

message Submission {
    string _id = 1;
    string problemId = 2;
    string userId = 3;
    string country = 4;
    string title = 5;
    optional string battleId = 6;
    int32 score = 7;
    Language language = 8;
    string userCode = 9;
    ExecutionResult executionResult = 10;
    optional int32 executionTime = 11;
    optional int32 memoryUsage = 12;
    Difficulty difficulty = 13;
    bool isFirst = 14;
    string updatedAt = 15;
    string createdAt = 16;
}

// --- Service Definition ---

service SubmissionService {
    rpc CreateSubmission(CreateSubmissionRequest) returns (Submission);
    rpc UpdateSubmission(UpdateSubmissionRequest) returns (google.protobuf.Empty);
    rpc GetSubmissions(GetSubmissionsRequest) returns (GetSubmissionsResponse);
}

message CreateSubmissionRequest {
    string problemId = 1;
    string userId = 2;
    optional string battleId = 3;
    optional string country = 4;
    string title = 5;
    Language language = 6;
    string userCode = 7;
    Difficulty difficulty = 8;
}

message UpdateSubmissionRequest {
    string _id = 1;
    ExecutionResult executionResult = 2;
    int32 executionTime = 3;
    int32 memoryUsage = 4;
}

message GetSubmissionsRequest {
    int32 page = 1;
    int32 limit = 2;

    optional string problemId = 3;
    optional string battleId = 4;
    optional string userId = 5; 
}

message GetSubmissionsResponse {
    repeated Submission submissions = 1;
    int32 totalPage = 2;
    int32 currentPage = 3;
    int32 totalItems = 4;
}



